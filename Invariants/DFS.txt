Baseline://////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

useful: 8
trivial: 1
sometimes useful: 10

assert(vertices > 0);                        // createGraph – graph must have at least one vertex

assert(src  >= 0 && src  < graph->vertices); // addEdge – source index within bounds
assert(dest >= 0 && dest < graph->vertices); // addEdge – destination index within bounds

assert(vertex >= 0 && vertex < graph->vertices);          // DFS – current vertex within bounds
assert(adjacentVertex >= 0 && adjacentVertex < graph->vertices); // DFS – adjacent vertex within bounds

assert(orderSize >= 0 && orderSize <= graph->vertices);   // DFSTraversal – traversal list size valid
assert(order[i]  >= 0 && order[i]  < graph->vertices);    // DFSTraversal – each listed vertex valid

assert(orderSize == vertices);               // main – traversal order covers all vertices


COT: ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

useful: 8
trivial: 5
sometimes useful: 14

assert(vertices > 0);                        /* createGraph – graph must have ≥ 1 vertex            */

assert(src  >= 0 && src  < graph->vertices); /* addEdge – source index within bounds                */
assert(dest >= 0 && dest < graph->vertices); /* addEdge – destination index within bounds           */

assert(vertex >= 0 && vertex < graph->vertices);          /* DFS – vertex index within bounds      */
assert(!visited[vertex]);                                   /* DFS – pre-condition: vertex unvisited */

assert(adjacentVertex >= 0 && adjacentVertex < graph->vertices); /* DFS – adjacent within bounds  */

assert(order[i] >= 0 && order[i] < graph->vertices);      /* DFSTraversal – every vertex index valid */

assert(orderSize == vertices);               /* main – traversal order covers all vertices          */


Role://///////////////////////////////////////////////////////////////


useful: 2
trivial: 4
sometimes useful: 2

/* DFS – adjacent vertex must be within graph bounds */
assert(adjacentVertex >= 0 && adjacentVertex < graph->vertices);

/* DFSTraversal – every vertex listed in the traversal order is valid */
assert(order[i] >= 0 && order[i] < graph->vertices);



